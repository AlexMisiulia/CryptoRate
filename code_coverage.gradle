apply plugin: 'jacoco'

def testTaskName = "testDebugUnitTest"

task jacocoTestReport(type: JacocoReport, dependsOn: testTaskName) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    def javaDebugTree = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*', //ButterKnife auto-generated code
                       '**/*$ViewBinder*.*', //ButterKnife auto-generated code
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       '**/*$Lambda$*.class', // Jacoco can not handle several "$" in class name.
                       '**/*Module.*', // Modules for Dagger.
                       '**/*Dagger*.*', // Dagger auto-generated code.
                       '**/*MembersInjector*.*', // Dagger auto-generated code.
                       '**/*_Provide*Factory*.*',
                       '**/*_Factory.*', //Dagger auto-generated code
            ]
    )

    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug")
    classDirectories = files([javaDebugTree], [kotlinDebugTree])

    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    executionData = files("${buildDir}/jacoco/${testTaskName}.exec")

    reports {
        html.enabled = true
        xml.enabled = true
    }
}